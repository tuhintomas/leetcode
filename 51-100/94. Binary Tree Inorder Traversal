Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]
Follow up: Recursive solution is trivial, could you do it iteratively?


Runtime: 20 ms, faster than 39.73% of Python online submissions for Binary Tree Inorder Traversal.
Memory Usage: 11.8 MB, less than 55.00% of Python online submissions for Binary Tree Inorder Traversal.



(recursive solution)


class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if root==None:
            return []
        l=[]
        self.helper(root,l)
        return l
    def helper(self,root,l):
        if root==None:
            return
        self.helper(root.left,l)
        l.append(root.val)
        self.helper(root.right,l)
