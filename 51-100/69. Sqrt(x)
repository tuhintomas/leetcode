Implement int sqrt(int x).

Compute and return the square root of x, where x is guaranteed to be a non-negative integer.

Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.

Example 1:

Input: 4
Output: 2
Example 2:

Input: 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since 
             the decimal part is truncated, 2 is returned.
             
             
 Inefficient solution:
 class Solution(object):
    def mySqrt(self, x):
        """
        :type x: int
        :rtype: int
        """
        if x<=1:
            return x
        s=1
        res=1
        while 1:
            sq=s*s
            if sq<=x:
                res=s
            s+=1
            if sq>x:
                return res
        
    Binary Search:
    class Solution(object):
    def mySqrt(self, x):
        """
        :type x: int
        :rtype: int
        """
        if x<=1:
            return x
        l=1
        r=x
        while True:
            mid=(l+r)//2
            if mid*mid<=x<(mid+1)*(mid+1):
                return mid
            elif mid*mid>x:
                r=mid-1
            else:
                l=mid+1
