Given an n-ary tree, return the postorder traversal of its nodes' values.

For example, given a 3-ary tree:

 



 

Return its postorder traversal as: [5,6,3,2,4,1].

 
Note:

Recursive solution is trivial, could you do it iteratively?



Runtime: 708 ms, faster than 30.20% of Python online submissions for N-ary Tree Postorder Traversal.
Memory Usage: 107.8 MB, less than 5.88% of Python online submissions for N-ary Tree Postorder Traversal.



class Solution(object):
    def postorder(self, root):
        """
        :type root: Node
        :rtype: List[int]
        """
        if root==None:
            return
        l=[]
        self.helper(root,l)
        return l
    def helper(self,root,l):
        if root==None:
            return
        for child in root.children:
            self.helper(child,l)
        l.append(root.val)
