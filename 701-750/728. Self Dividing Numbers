A self-dividing number is a number that is divisible by every digit it contains.

For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.

Also, a self-dividing number is not allowed to contain the digit zero.

Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.

Example 1:
Input: 
left = 1, right = 22
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
Note:

The boundaries of each input argument are 1 <= left <= right <= 10000.





Runtime: 52 ms, faster than 85.65% of Python3 online submissions for Self Dividing Numbers.
Memory Usage: 13.8 MB, less than 8.00% of Python3 online submissions for Self Dividing Numbers.




class Solution:
    def selfDividingNumbers(self, left: int, right: int) -> List[int]:
        res=[]
        for num in range(left,right+1):
            if self.isSelfDividing(num):
                res.append(num)
        return res
    def isSelfDividing(self,num):
        temp=num
        while temp>0:
            digit=temp%10
            if digit==0:
                return False
            elif num%digit!=0:
                return False
            temp=temp//10
        return True
